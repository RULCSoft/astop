#!/usr/bin/env python
# -*- encoding: utf8 -*-
# TITLE: asttop
# GITHUB: https://github.com/jjsearle/asttop
# AUTHOR: Joe Searle
# EMAIL: joe@joe-searle.com

import curses, traceback, time, thread, os, sys
from subprocess import Popen, PIPE

def main(stdscr):
  global screen
  global screen2
  global title
  global c
  global callnumlist
  global highestnumcalls
  global currentnumcalls
  callnumlist = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  highestnumcalls = 10
  currentnumcalls = 0

  check_root()
  check_asterisk()
  title = "ASTTOP - SUMMARY"
  screen = stdscr.subwin(0, 0)
  screen2 = stdscr.subwin(0, 0)
  curses.start_color()
  curses.init_pair(1, curses.COLOR_GREEN, curses.COLOR_BLACK)
  curses.init_pair(2, curses.COLOR_WHITE, curses.COLOR_BLACK)
  screen.bkgd(curses.color_pair(1))
  # Get window diminsions
  global y, x;
  y, x = screen.getmaxyx()
  global cur_x, cur_y;
  # Sets the cursor to center the text on screen
  cur_x = (x/2)-(len(title))/2
  cur_y = (y/2)
  # Add string to screen
  screen.addstr( 0, cur_x, title) 
  print_toolbar(y, x)
  screen.refresh() # Refresh to populate screen with data
 
  c = 49
  thread.start_new_thread(opt_calls, ())
  c = screen.getch() # Get char
  c2 = 0
  while c != ord('q'): # Exit loop if char caught is 'q'
    
	if c2 != c: # Stops two thread of the same function being started
		
    		if c == 49:
			thread.start_new_thread(opt_calls, ())
    		elif c == 50:
			thread.start_new_thread(opt_peers, ())
    		elif c == 51:
			thread.start_new_thread(opt_sip, ())
    		elif c == 52:
			thread.start_new_thread(opt_dahdi, ())
    		elif c == 53:
			thread.start_new_thread(opt_iax, ())
    
	c2 = c
    	c = screen.getch()
  return

# Exit displaying error if user is not root
def check_root():
	if not os.geteuid() == 0:
        	sys.exit('ERROR: asttop must be run as root.')

# Exit displaying error if asterisk is not started
def check_asterisk():
	p = Popen(["ps", "-Af"], stdout=PIPE)
	out, err = p.communicate()
	if ('asterisk' not in out):
        	sys.exit('ERROR: asterisk is not running.')

# Checks if DADHI is running, returns 1 when it is, returns 0 when it isn't
def check_dahdi():
        p = Popen(["ps", "-Af"], stdout=PIPE)
        out, err = p.communicate()
        if ('dahdi' in out):
                running = 1
	else:
		running = 0
	return running

# Gets number of calls from asterisk
def check_active_calls():
        p = Popen(["asterisk", "-rx", "core show calls"], stdout=PIPE)
        out, err = p.communicate()
        s = out.splitlines()[0]
        s2 = s.split(' ')[0]
        return int(s2)

# Builds the calls graph
def gen_calls_graph():
	screen2.erase()
        count = 0
        #block = "»"
        block = "¤"
	linenum = 3
        for callnum in callnumlist:
                value = (float(callnumlist[count]) / float(highestnumcalls)) * 100
                prntstr =  "[" + block * int(value) + "] " + str(callnumlist[count])
                screen2.addstr(linenum, 3, prntstr)
		if count != 29:
                        callnumlist[count] = callnumlist[count + 1 ]
                count = count +1
		linenum = linenum + 1
	screen2.refresh()
	draw_decor()

def draw_decor():
	#screen.box()
	screen.addstr( 0, cur_x, title)
	print_toolbar(y, x)
	screen.refresh()

# Run an asterisk command and print the result
def run_ast_comm(ast_comm_str):
		screen2.erase()
		proc = Popen(['asterisk', '-rx', ast_comm_str], stdout=PIPE, stderr=PIPE)
                return_code = proc.wait()
                if return_code == 0:
                        linenum = 3
                        for line in iter(proc.stdout.readline,''):
                                linestr =  line.rstrip() + "\r"
                                screen2.addstr(linenum, 2, linestr)
                                linenum = linenum + 1
                else:
                        linestr = "Failure %s:\n%s" % (return_code, proc.stderr.read())
                        screen2.addstr(linenum, 2, linestr)
		screen2.refresh()
		draw_decor()

# Prints out the toolbar string
def print_toolbar(y, x):
	toolbarstr = "1:CALLS | 2:PEERS | 3:SIP | 4:DAHDI | 5:IAX | Q:QUIT"
  	cent_x = (x/2)-(len(toolbarstr))/2
	screen.addstr(y - 1, cent_x, toolbarstr)

def opt_calls():
        global title
        screen2.erase()
        title = "ASTTOP - CALLS"
        draw_decor()
	while c == 49:
                currentnumcalls = check_active_calls()
		gen_calls_graph()
		callnumlist[29] = currentnumcalls
                time.sleep(1)

def opt_iax():
        global title
        screen2.erase()
        title = "ASTTOP - IAX"
        draw_decor()
	while c == 53: 
		run_ast_comm("iax2 show netstats")
                time.sleep(1)

def opt_dahdi():
	global title
        screen2.erase()
        title = "ASTTOP - DAHDI"
        draw_decor()
        while c == 52:
		if check_dahdi() == 1:
               		run_ast_comm("dahdi show status")
               	else:
			screen2.addstr(3, 2, "DAHDI service not running.")
		
		screen2.refresh()
               	time.sleep(1)
	

def opt_peers():
        global title
        screen2.erase()
        title = "ASTTOP - PEERS"
        draw_decor()
	while c == 50:
                run_ast_comm("sip show peers")
                time.sleep(1)

def opt_sip():
	global title
        screen2.erase()
        title = "ASTTOP - SIP"
        draw_decor()
	while c == 51:
                run_ast_comm("sip show channelstats")
                time.sleep(1)

if __name__ == '__main__':
  try:
    # Initialize curses
    stdscr=curses.initscr()

    # Turn off echoing of keys, and enter cbreak mode,
    # where no buffering is performed on keyboard input
    curses.noecho()
    curses.cbreak()

    # In keypad mode, escape sequences for special keys
    # will be interpreted and a special value like
    # curses.KEY_LEFT will be returned
    stdscr.keypad(1)
    curses.curs_set(0) # Hide cursor position

    main(stdscr) # enter main loop
  except curses.error:
    # In the event of error, restore terminal to sane state
    traceback.print_exc() # Print the exception
    print(curses.ERR)
  except KeyboardInterrupt:
    # Caught KeyboardInterrupt (Gets rid of stacktrace)
    # Set everything back to normal before exit
    stdscr.keypad(0)
    curses.echo()
    curses.nocbreak()
    curses.endwin()
    exit()
  finally:
    # Set everything back to normal
    stdscr.keypad(0)
    curses.echo()
    curses.nocbreak()
    curses.endwin()
